{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"UniGateway What is UniGateway UniGateway is a software to control automation gateways. When installed on supported hardware, it allows you to control electronic sensors and controllers. It is designed to be an essential building block of automation systems like the smart home solution. Currently, you can install UniGateway on MqGateway or Raspberry Pi . UniGateway supports MQTT Homie convention and provides out-of-the-box integration with home automation software like OpenHab and Home Assistant. UniGateway is free to use and available with open-source license. What's the use case? Typical use case for UniGateway is a house with sensors and controllers distributed all around with wired connections. You can use MqGateway or Raspberry Pi to plug in simple and inexpensive devices, like relay modules, PIR motion sensors or just plain wall switches to make fully capable home automation system. The most important features Hardware agnostic UniGateway currently supports Raspberry Pi and MqGateway, but it is prepared to add support for other hardware. Fully local No cloud needed - you have a full control and don't share your data with anyone. Seamless integration with popular open source home automation systems Out-of-the-box integration with Home Assistant and OpenHAB. MQTT supports allows you to integrate it with almost any of existing home automation systems. Advocates for wired solutions Avoid maintenance of wireless solution, changing batteries and additional radio waves at your home. Flexible Do you have single light to control? Connect relay with Raspberry Pi and start using UniGateway. It will scale with your system. We have UniGateway system with 13 instances and hundreds of sensors in production as well. Support multiple devices Unigateway already supports many devices like: relay, light, button/switch, reed switch, garage gate, roller shutter, temperature and humidity sensor. See full list on supported devices page Compound devices support Add two relays and two reed switches to create gate device in UniGateway and have a full control over it. A couple of simple devices can create complex device with simple control. Extensible UniGateway is the open solution. It is prepared to support more hardware (beside Raspberry Pi and MqGateway), easily add new controllers/sensors and implement more integrations. WebSocket and MQTT APIs are available to monitor and control attached devices. What's next? Introduction Quick start on Raspberry Pi Quick start on MqGateway Supported devices Installation","title":"Start"},{"location":"#unigateway","text":"","title":"UniGateway"},{"location":"#what-is-unigateway","text":"UniGateway is a software to control automation gateways. When installed on supported hardware, it allows you to control electronic sensors and controllers. It is designed to be an essential building block of automation systems like the smart home solution. Currently, you can install UniGateway on MqGateway or Raspberry Pi . UniGateway supports MQTT Homie convention and provides out-of-the-box integration with home automation software like OpenHab and Home Assistant. UniGateway is free to use and available with open-source license.","title":"What is UniGateway"},{"location":"#whats-the-use-case","text":"Typical use case for UniGateway is a house with sensors and controllers distributed all around with wired connections. You can use MqGateway or Raspberry Pi to plug in simple and inexpensive devices, like relay modules, PIR motion sensors or just plain wall switches to make fully capable home automation system.","title":"What's the use case?"},{"location":"#the-most-important-features","text":"","title":"The most important features"},{"location":"#hardware-agnostic","text":"UniGateway currently supports Raspberry Pi and MqGateway, but it is prepared to add support for other hardware.","title":"Hardware agnostic"},{"location":"#fully-local","text":"No cloud needed - you have a full control and don't share your data with anyone.","title":"Fully local"},{"location":"#seamless-integration-with-popular-open-source-home-automation-systems","text":"Out-of-the-box integration with Home Assistant and OpenHAB. MQTT supports allows you to integrate it with almost any of existing home automation systems.","title":"Seamless integration with popular open source home automation systems"},{"location":"#advocates-for-wired-solutions","text":"Avoid maintenance of wireless solution, changing batteries and additional radio waves at your home.","title":"Advocates for wired solutions"},{"location":"#flexible","text":"Do you have single light to control? Connect relay with Raspberry Pi and start using UniGateway. It will scale with your system. We have UniGateway system with 13 instances and hundreds of sensors in production as well.","title":"Flexible"},{"location":"#support-multiple-devices","text":"Unigateway already supports many devices like: relay, light, button/switch, reed switch, garage gate, roller shutter, temperature and humidity sensor. See full list on supported devices page","title":"Support multiple devices"},{"location":"#compound-devices-support","text":"Add two relays and two reed switches to create gate device in UniGateway and have a full control over it. A couple of simple devices can create complex device with simple control.","title":"Compound devices support"},{"location":"#extensible","text":"UniGateway is the open solution. It is prepared to support more hardware (beside Raspberry Pi and MqGateway), easily add new controllers/sensors and implement more integrations. WebSocket and MQTT APIs are available to monitor and control attached devices.","title":"Extensible"},{"location":"#whats-next","text":"Introduction Quick start on Raspberry Pi Quick start on MqGateway Supported devices Installation","title":"What's next?"},{"location":"user-guide/configuration/","text":"There are two types of the configuration for UniGateway: Devices configuration (in gateway.yaml file) Configures what and how smart devices are connected to UniGateway. Typically stored in /opt/unigateway/gateway.yaml . System configuration (passed by environment variables) Configures stuff related to underlying hardware and features availability. Typically stored in /opt/unigateway/start_unigateway.sh . Devices configuration Configures what and how smart devices are connected to UniGateway. Hint There is a JSON schema file for this configuration. Use it with your favourite YAML editor (e.g. IntelliJ or VSCode) for autocompletion and instant validation. Structure Basic structure of the configuration is like this: configVersion : \"1.0\" # Version of UniGateway configuration file - defines configuration structure name : \"MainGateway\" # User-friendly name of the UniGateway installation - preferably unique in the network id : \"MainGateway\" # Identifier of Gateway - should be unique for UniGateway installations in the network devices : # List of devices configurations - name : \"TV power\" # User-friendly name of the device - might be visible in integrated system (e.g. Home Assistant) id : \"tv_power\" # Unique identifier for the device across all devices on this Gateway type : RELAY # type of the device (see \"Supported devices\") connectors : # List of connectors which structure is specific for the underlying hardware (example for MqGateway) state : portNumber : 1 wires : BLUE_WHITE config : # contains properties for the device used to adjust device behaviour or integrations delayMs : 100 haComponent : SWITCH For the structure of configuration for specific devices see supported devices examples . Connectors configuration There are two types of devices: - simple device - requires connectors in configuration which reference underlying hardware inputs/outputs (e.g. RELAY or SWITCH) - complex device - composed of other devices (simple or complex), requires \"internalDevices\" in configuration (e.g. GATE or SHUTTER) Every simple device has one or many connectors in the configuration. Connector references real pins in the hardware (i.e. by GPIO number in Raspberry Pi and by RJ45 port and wire color for MqGateway) or MySensors node sensor. Connector configuration structure depends on the underlying hardware implementation. It will be different for RaspberryPi, MqGateway and MySensors. Raspberry Pi NAME DEFAULT DESCRIPTION gpio GPIO number from Raspberry Pi pinout (REQUIRED) debounceMs 50 debounce for input pin in milliseconds pullUpDown PULL_UP start state for input pin (PULL_UP or PULL_DOWN) Example devices : - name : Workshop light switch id : workshop_light_switch type : SWITCH_BUTTON connectors : state : gpio : 17 # GPIO number from Rapberry Pi pinout debounceMs : 70 # optional (default: 50) pullUpDown : PULL_DOWN # optional (default: PULL_UP) MqGateway NAME DEFAULT DESCRIPTION portNumber number of the MqGateway port where device is connected (REQUIRED) wireColor color of the UTP cable wire, the device is connected with (REQUIRED one of: BLUE, BLUE_WHITE, GREEN, GREEN_WHITE) debounceMs 50 debounce for input pin in milliseconds Example devices : - name : Workshop light switch id : workshop_light_switch type : SWITCH_BUTTON connectors : state : portNumber : 2 # number of the MqGateway wireColor : BLUE_WHITE # color of the UTP cable wire debounceMs : 70 # optional (default: 50) MySensors NAME DEFAULT DESCRIPTION source specifies that connector is using MySensors (REQUIRED: \"MYSENSORS\") nodeId MySensors node identifier (REQUIRED) sensorId MySensors child sensor identifier (REQUIRED) type 50 Type of the value returned from the sensor, in line with MySensors documentation (e.g. V_TEMP, V_HUM) Example devices : - name : \"Workshop temperature\" id : \"workshop_temperature\" type : TEMPERATURE connectors : state : source : MYSENSORS nodeId : 10 sensorId : 1 type : V_TEMP Loading devices configuration By default, UniGateway expects devices configuration file to be named gateway.yaml and to be available in the current working directory. It means, it should be available in the directory from where UniGateway application is started. You can change the path by specifying other path in environment variable GATEWAY.CONFIGPATH like this: export GATEWAY_CONFIGPATH = \"/opt/gateway-configuration.yaml\" Remember to add this command to ~/.bashrc if you want it to survive operating system reboot. Internal device reference When you need to configure complex device with \"internalDevices\" you have to \"reference\" the internal devices. It means you have to configure the simple device and then use its id value in referenceId property of \"internalDevices\" entry. See the example below which configures garage door (GATE device) with reed switch configured as referenced device. Example name : \"GarageGateway\" id : \"GarageGateway\" devices : - name : \"Right garage door action button\" id : \"right_garage_door_action_button\" # <-- value used for \"referenceId\" type : EMULATED_SWITCH connectors : state : portNumber : 1 wires : BLUE_WHITE - name : \"Right garage door reed switch\" id : \"right_garage_door_closed_reed\" type : REED_SWITCH connectors : state : portNumber : 3 wireColor : GREEN_WHITE - name : \"Right garage door\" id : \"right_garage_door\" type : GATE internalDevices : actionButton : referenceId : \"right_garage_door_action_button\" # <-- it references to the EMULATED_SWITCH defined earlier closedReedSwitch : referenceId : \"right_garage_door_closed_reed\" # <-- it references to the REED_SWITCH defined earlier System configuration Configures stuff related to underlying hardware and features availability. This configurations can be set as environment variables like this: export GATEWAY_MQTT_ENABLED = true Add this commands to UniGateway start script, .bashrc or .zshrc so they survive operating system restart. Basic configuration NAME DEFAULT DESCRIPTION GATEWAY_CONFIG_PATH gateway.yaml path to the devices configuration file GATEWAY_SYSTEM_NETWORK_ADAPTER eth0 name of the ethernet interface used to connect to MQTT / WebSocket GATEWAY_SYSTEM_PLATFORM SIMULATED type of the underlying hardware (RASPBERRYPI or MQGATEWAY) Protocols and integrations MQTT NAME DEFAULT DESCRIPTION GATEWAY_MQTT_ENABLED false Enable control through MQTT communication GATEWAY_MQTT_HOSTNAME (not set) MQTT broker hostname or ip address (e.g. 192.168.1.100) GATEWAY_MQTT_PORT 1883 MQTT port number GATEWAY_MQTT_USERNAME (not set) MQTT user name (optional) GATEWAY_MQTT_PASSWORD (not set) MQTT user password (optional) MySensors UniGateway communicates with the MySensors gateway in one of two ways: by the virtual serial when MySensors gateway is installed on the same hardware (default) by the real serial when MySensors gateway is installed on the separate hardware UniGateway installation SD cards have MySensors gateway already installed and configured to use UART and RS485 communication to nodes. More about how to connect and use MySensors devices with RS485 can be found on specific hardware documentation and MySensors page . NAME DEFAULT DESCRIPTION GATEWAY_SYSTEM_MYSENSORS_ENABLED false Enable communication with MySensors gateway GATEWAY_SYSTEM_MYSENSORS_PORT_DESCRIPTOR \"/dev/ttys000\" Serial port address to communicate with MySensors gateway GATEWAY_SYSTEM_MYSENSORS_BAUD_RATE 9600 Baud rate for serial communication with MySensors gateway Home Assistant NAME DEFAULT DESCRIPTION HOMEASSISTANT_ENABLED true Enable integration with Home Assistant through MQTT (requires MQTT to be enabled) HOMEASSISTANT_ROOT_TOPIC homeassistant Root topic for Home Assistant MQTT discovery Hardware specific Raspberry Pi NAME DEFAULT DESCRIPTION GATEWAY_SYSTEM_PLATFORM_CONFIG_DEFAULTDEBOUNCEMS 50 default debounce for input pins in milliseconds GATEWAY_SYSTEM_PLATFORM_CONFIG_DEFAULTPULLUPDOWN PULL_UP default state for input pins (PULL_UP or PULL_DOWN) MqGateway NAME DEFAULT DESCRIPTION GATEWAY_SYSTEM_PLATFORM_CONFIG_EXPANDER_ENABLED false should be \"true\" if you have I/O Expander board connected GATEWAY_SYSTEM_PLATFORM_CONFIG_DEFAULTDEBOUNCEMS 50 default debounce for input pins in milliseconds GATEWAY_SYSTEM_PLATFORM_CONFIG_COMPONENTS_MCP23017_PORTS (depends on I/O expander enablement) I2C addresses of MCP23017 expanders","title":"Configuration"},{"location":"user-guide/configuration/#devices-configuration","text":"Configures what and how smart devices are connected to UniGateway. Hint There is a JSON schema file for this configuration. Use it with your favourite YAML editor (e.g. IntelliJ or VSCode) for autocompletion and instant validation.","title":"Devices configuration"},{"location":"user-guide/configuration/#structure","text":"Basic structure of the configuration is like this: configVersion : \"1.0\" # Version of UniGateway configuration file - defines configuration structure name : \"MainGateway\" # User-friendly name of the UniGateway installation - preferably unique in the network id : \"MainGateway\" # Identifier of Gateway - should be unique for UniGateway installations in the network devices : # List of devices configurations - name : \"TV power\" # User-friendly name of the device - might be visible in integrated system (e.g. Home Assistant) id : \"tv_power\" # Unique identifier for the device across all devices on this Gateway type : RELAY # type of the device (see \"Supported devices\") connectors : # List of connectors which structure is specific for the underlying hardware (example for MqGateway) state : portNumber : 1 wires : BLUE_WHITE config : # contains properties for the device used to adjust device behaviour or integrations delayMs : 100 haComponent : SWITCH For the structure of configuration for specific devices see supported devices examples .","title":"Structure"},{"location":"user-guide/configuration/#connectors-configuration","text":"There are two types of devices: - simple device - requires connectors in configuration which reference underlying hardware inputs/outputs (e.g. RELAY or SWITCH) - complex device - composed of other devices (simple or complex), requires \"internalDevices\" in configuration (e.g. GATE or SHUTTER) Every simple device has one or many connectors in the configuration. Connector references real pins in the hardware (i.e. by GPIO number in Raspberry Pi and by RJ45 port and wire color for MqGateway) or MySensors node sensor. Connector configuration structure depends on the underlying hardware implementation. It will be different for RaspberryPi, MqGateway and MySensors.","title":"Connectors configuration"},{"location":"user-guide/configuration/#raspberry-pi","text":"NAME DEFAULT DESCRIPTION gpio GPIO number from Raspberry Pi pinout (REQUIRED) debounceMs 50 debounce for input pin in milliseconds pullUpDown PULL_UP start state for input pin (PULL_UP or PULL_DOWN) Example devices : - name : Workshop light switch id : workshop_light_switch type : SWITCH_BUTTON connectors : state : gpio : 17 # GPIO number from Rapberry Pi pinout debounceMs : 70 # optional (default: 50) pullUpDown : PULL_DOWN # optional (default: PULL_UP)","title":"Raspberry Pi"},{"location":"user-guide/configuration/#mqgateway","text":"NAME DEFAULT DESCRIPTION portNumber number of the MqGateway port where device is connected (REQUIRED) wireColor color of the UTP cable wire, the device is connected with (REQUIRED one of: BLUE, BLUE_WHITE, GREEN, GREEN_WHITE) debounceMs 50 debounce for input pin in milliseconds Example devices : - name : Workshop light switch id : workshop_light_switch type : SWITCH_BUTTON connectors : state : portNumber : 2 # number of the MqGateway wireColor : BLUE_WHITE # color of the UTP cable wire debounceMs : 70 # optional (default: 50)","title":"MqGateway"},{"location":"user-guide/configuration/#mysensors","text":"NAME DEFAULT DESCRIPTION source specifies that connector is using MySensors (REQUIRED: \"MYSENSORS\") nodeId MySensors node identifier (REQUIRED) sensorId MySensors child sensor identifier (REQUIRED) type 50 Type of the value returned from the sensor, in line with MySensors documentation (e.g. V_TEMP, V_HUM) Example devices : - name : \"Workshop temperature\" id : \"workshop_temperature\" type : TEMPERATURE connectors : state : source : MYSENSORS nodeId : 10 sensorId : 1 type : V_TEMP","title":"MySensors"},{"location":"user-guide/configuration/#loading-devices-configuration","text":"By default, UniGateway expects devices configuration file to be named gateway.yaml and to be available in the current working directory. It means, it should be available in the directory from where UniGateway application is started. You can change the path by specifying other path in environment variable GATEWAY.CONFIGPATH like this: export GATEWAY_CONFIGPATH = \"/opt/gateway-configuration.yaml\" Remember to add this command to ~/.bashrc if you want it to survive operating system reboot.","title":"Loading devices configuration"},{"location":"user-guide/configuration/#internal-device-reference","text":"When you need to configure complex device with \"internalDevices\" you have to \"reference\" the internal devices. It means you have to configure the simple device and then use its id value in referenceId property of \"internalDevices\" entry. See the example below which configures garage door (GATE device) with reed switch configured as referenced device. Example name : \"GarageGateway\" id : \"GarageGateway\" devices : - name : \"Right garage door action button\" id : \"right_garage_door_action_button\" # <-- value used for \"referenceId\" type : EMULATED_SWITCH connectors : state : portNumber : 1 wires : BLUE_WHITE - name : \"Right garage door reed switch\" id : \"right_garage_door_closed_reed\" type : REED_SWITCH connectors : state : portNumber : 3 wireColor : GREEN_WHITE - name : \"Right garage door\" id : \"right_garage_door\" type : GATE internalDevices : actionButton : referenceId : \"right_garage_door_action_button\" # <-- it references to the EMULATED_SWITCH defined earlier closedReedSwitch : referenceId : \"right_garage_door_closed_reed\" # <-- it references to the REED_SWITCH defined earlier","title":"Internal device reference"},{"location":"user-guide/configuration/#system-configuration","text":"Configures stuff related to underlying hardware and features availability. This configurations can be set as environment variables like this: export GATEWAY_MQTT_ENABLED = true Add this commands to UniGateway start script, .bashrc or .zshrc so they survive operating system restart.","title":"System configuration"},{"location":"user-guide/configuration/#basic-configuration","text":"NAME DEFAULT DESCRIPTION GATEWAY_CONFIG_PATH gateway.yaml path to the devices configuration file GATEWAY_SYSTEM_NETWORK_ADAPTER eth0 name of the ethernet interface used to connect to MQTT / WebSocket GATEWAY_SYSTEM_PLATFORM SIMULATED type of the underlying hardware (RASPBERRYPI or MQGATEWAY)","title":"Basic configuration"},{"location":"user-guide/configuration/#protocols-and-integrations","text":"","title":"Protocols and integrations"},{"location":"user-guide/configuration/#mqtt","text":"NAME DEFAULT DESCRIPTION GATEWAY_MQTT_ENABLED false Enable control through MQTT communication GATEWAY_MQTT_HOSTNAME (not set) MQTT broker hostname or ip address (e.g. 192.168.1.100) GATEWAY_MQTT_PORT 1883 MQTT port number GATEWAY_MQTT_USERNAME (not set) MQTT user name (optional) GATEWAY_MQTT_PASSWORD (not set) MQTT user password (optional)","title":"MQTT"},{"location":"user-guide/configuration/#mysensors_1","text":"UniGateway communicates with the MySensors gateway in one of two ways: by the virtual serial when MySensors gateway is installed on the same hardware (default) by the real serial when MySensors gateway is installed on the separate hardware UniGateway installation SD cards have MySensors gateway already installed and configured to use UART and RS485 communication to nodes. More about how to connect and use MySensors devices with RS485 can be found on specific hardware documentation and MySensors page . NAME DEFAULT DESCRIPTION GATEWAY_SYSTEM_MYSENSORS_ENABLED false Enable communication with MySensors gateway GATEWAY_SYSTEM_MYSENSORS_PORT_DESCRIPTOR \"/dev/ttys000\" Serial port address to communicate with MySensors gateway GATEWAY_SYSTEM_MYSENSORS_BAUD_RATE 9600 Baud rate for serial communication with MySensors gateway","title":"MySensors"},{"location":"user-guide/configuration/#home-assistant","text":"NAME DEFAULT DESCRIPTION HOMEASSISTANT_ENABLED true Enable integration with Home Assistant through MQTT (requires MQTT to be enabled) HOMEASSISTANT_ROOT_TOPIC homeassistant Root topic for Home Assistant MQTT discovery","title":"Home Assistant"},{"location":"user-guide/configuration/#hardware-specific","text":"","title":"Hardware specific"},{"location":"user-guide/configuration/#raspberry-pi_1","text":"NAME DEFAULT DESCRIPTION GATEWAY_SYSTEM_PLATFORM_CONFIG_DEFAULTDEBOUNCEMS 50 default debounce for input pins in milliseconds GATEWAY_SYSTEM_PLATFORM_CONFIG_DEFAULTPULLUPDOWN PULL_UP default state for input pins (PULL_UP or PULL_DOWN)","title":"Raspberry Pi"},{"location":"user-guide/configuration/#mqgateway_1","text":"NAME DEFAULT DESCRIPTION GATEWAY_SYSTEM_PLATFORM_CONFIG_EXPANDER_ENABLED false should be \"true\" if you have I/O Expander board connected GATEWAY_SYSTEM_PLATFORM_CONFIG_DEFAULTDEBOUNCEMS 50 default debounce for input pins in milliseconds GATEWAY_SYSTEM_PLATFORM_CONFIG_COMPONENTS_MCP23017_PORTS (depends on I/O expander enablement) I2C addresses of MCP23017 expanders","title":"MqGateway"},{"location":"user-guide/installation/","text":"What do you need Raspberry Pi or MqGateway with NanoPI NEO SD card (minimum 8GB) Installation steps Download latest UniGateway SD card image for your hardware: MqGateway Raspberry Pi Flash SD card with downloaded image (you can use Balena Etcher ) Power up your hardware and wait until it has started Take into account that it may take a few minutes for Unigateway to start after booting. Open browser and go to http://unigateway.local:8080/ui to check it works After installation You can configure UniGateway and add devices by changing the configuration file on the device. Configuration file with the devices is stored in /opt/unigateway/gateway.yaml by default. You can use SSH to connect to the device as a root with default password 1234 . You'll be asked to change the password and set regular user credentials on the first SSH connection. On Raspberry Pi you can also connect the display to change the credentials. You can now read more about what kind of devices you can configure and how the configuration works . What's next? Quick start on Raspberry Pi Quick start on MqGateway Supported devices and configuration","title":"Installation"},{"location":"user-guide/installation/#what-do-you-need","text":"Raspberry Pi or MqGateway with NanoPI NEO SD card (minimum 8GB)","title":"What do you need"},{"location":"user-guide/installation/#installation-steps","text":"Download latest UniGateway SD card image for your hardware: MqGateway Raspberry Pi Flash SD card with downloaded image (you can use Balena Etcher ) Power up your hardware and wait until it has started Take into account that it may take a few minutes for Unigateway to start after booting. Open browser and go to http://unigateway.local:8080/ui to check it works","title":"Installation steps"},{"location":"user-guide/installation/#after-installation","text":"You can configure UniGateway and add devices by changing the configuration file on the device. Configuration file with the devices is stored in /opt/unigateway/gateway.yaml by default. You can use SSH to connect to the device as a root with default password 1234 . You'll be asked to change the password and set regular user credentials on the first SSH connection. On Raspberry Pi you can also connect the display to change the credentials. You can now read more about what kind of devices you can configure and how the configuration works .","title":"After installation"},{"location":"user-guide/installation/#whats-next","text":"Quick start on Raspberry Pi Quick start on MqGateway Supported devices and configuration","title":"What's next?"},{"location":"user-guide/integration/","text":"This page describes how to configure home automation applications (like Home Assistant and OpenHab) to integrate with them and control devices connected to UniGateway. Home Assistant The easiest way to integrate UniGateway is to use Home Assistant MQTT discovery . UniGateway will automatically broadcast all devices' configuration under \"homeassistant/\" topic when connected to MQTT broker. All you need to do is to: enable MQTT in UniGateway by setting environment variable GATEWAY_MQTT_ENABLED to true (more about configuration here ) enable MQTT integration in Home Assistant as described in the Home Assistant documentation . After UniGateway start, you should be able to see all the UniGateway configured devices as devices and entities in Home Assistant. If you want to disable broadcasting the Home Assistant configuration to MQTT, set environment variable HOMEASSISTANT_ENABLED to false (see system configuration for details). OpenHab OpenHab MQTT Binding supports Home Assistant MQTT discovery . UniGateway will automatically broadcast all devices' configuration under \"homeassistant/\" topic when connected to MQTT broker. If you want to disable broadcasting Home Assistant configuration to MQTT, set environment variable HOMEASSISTANT_ENABLED to false (see system configuration for details). Although OpenHab supports Homie convention 3.0.1 which is followed by UniGateway - using Home Assistant MQTT discovery gives more detailed configuration automatically. General communication UniGateway can work as the MQTT gateway. This means you can integrate it to any home automation platform which supports MQTT devices. Additionally, it supports Home Assistant MQTT discovery feature which is also supported in OpenHab MQTT binding . UniGateway follows Homie convention 3.0.1 for MQTT communication. Homies MQTT topic layout follows the pattern homie/device/node/property . Device is a name of your UniGateway instance (see how to set name in configuration ). Node is a unique string identifier of the sensor/controller connected to UniGateway ( id in configuration ). Property can be a \"temperature\" when reading value from temperature sensor module or \"state\" in case of PIR motion sensor. Examples: homie/MyGateway/workshop_bme/temperature for reading temperature from BME280 on the id = \"workshop_bme\" homie/MyGateway/kitchen_bme/humidity for reading humidity from BME280 on the id = \"kitchen_bme\" homie/MyGateway/wardrobe_motion/state for reading motion sensor state on the id = \"wardrobe_motion\" ( ON if motion has started, OFF otherwise) When device supports setting a value (e.g. relay), desired value should be sent to homie/device/node/property/set topic Example: send ON to homie/MyGateway/wordrobe_light/state/set to switch on light connected to relay on id = \"wardrobe_light\"","title":"Integration"},{"location":"user-guide/integration/#home-assistant","text":"The easiest way to integrate UniGateway is to use Home Assistant MQTT discovery . UniGateway will automatically broadcast all devices' configuration under \"homeassistant/\" topic when connected to MQTT broker. All you need to do is to: enable MQTT in UniGateway by setting environment variable GATEWAY_MQTT_ENABLED to true (more about configuration here ) enable MQTT integration in Home Assistant as described in the Home Assistant documentation . After UniGateway start, you should be able to see all the UniGateway configured devices as devices and entities in Home Assistant. If you want to disable broadcasting the Home Assistant configuration to MQTT, set environment variable HOMEASSISTANT_ENABLED to false (see system configuration for details).","title":"Home Assistant"},{"location":"user-guide/integration/#openhab","text":"OpenHab MQTT Binding supports Home Assistant MQTT discovery . UniGateway will automatically broadcast all devices' configuration under \"homeassistant/\" topic when connected to MQTT broker. If you want to disable broadcasting Home Assistant configuration to MQTT, set environment variable HOMEASSISTANT_ENABLED to false (see system configuration for details). Although OpenHab supports Homie convention 3.0.1 which is followed by UniGateway - using Home Assistant MQTT discovery gives more detailed configuration automatically.","title":"OpenHab"},{"location":"user-guide/integration/#general-communication","text":"UniGateway can work as the MQTT gateway. This means you can integrate it to any home automation platform which supports MQTT devices. Additionally, it supports Home Assistant MQTT discovery feature which is also supported in OpenHab MQTT binding . UniGateway follows Homie convention 3.0.1 for MQTT communication. Homies MQTT topic layout follows the pattern homie/device/node/property . Device is a name of your UniGateway instance (see how to set name in configuration ). Node is a unique string identifier of the sensor/controller connected to UniGateway ( id in configuration ). Property can be a \"temperature\" when reading value from temperature sensor module or \"state\" in case of PIR motion sensor. Examples: homie/MyGateway/workshop_bme/temperature for reading temperature from BME280 on the id = \"workshop_bme\" homie/MyGateway/kitchen_bme/humidity for reading humidity from BME280 on the id = \"kitchen_bme\" homie/MyGateway/wardrobe_motion/state for reading motion sensor state on the id = \"wardrobe_motion\" ( ON if motion has started, OFF otherwise) When device supports setting a value (e.g. relay), desired value should be sent to homie/device/node/property/set topic Example: send ON to homie/MyGateway/wordrobe_light/state/set to switch on light connected to relay on id = \"wardrobe_light\"","title":"General communication"},{"location":"user-guide/introduction/","text":"This section describes how UniGateway works and how it can be used to create automation system like smart home solution. Why and when to use it? Typical smart home solution is based on multiple sensors and controllers distributed around the house (e.g. temperature, motion, light sensors, switch buttons, relays, buzzers). Central component of the system is home automation application like OpenHab or Home Assistant which allows you to set rules and control devices with graphical interface and mobile application. Binding those elements is usually done either with some vendor gateway (e.g. Z-Wave Gateway) or by connecting sensors to microcontroller (e.g. ESP8266, Arduino) which communicates with home automation application. The problem with the vendor gateway solution is these are mostly wireless and often closed solution. This unfortunately means - monitoring and changing batteries (plus a lot of radio waves around the house). Additionally, vendor sensors are relatively expensive comparing to the bare modules which are usually used with Raspberry Pi or Arduino. Connecting a sensor to Arduino or similar microcontroller will save a lot of money on sensors, because you can use cheap, ready-to-use modules, but you still need to send data from microcontroller to home automation application. This can be done wireless (WiFi or RF), but it gets us back to the problem with batteries and radio noise. Even if you add wired connection (e.g. ethernet) to microcontroller, having single microcontroller for each one or two sensors is not very cost-effective. Problems described above are the ones UniGateway is trying to solve. List of supported devices (sensors/controllers) can be found on supported devices page. It is possible to install UniGateway on single-board computer (SBC) like Raspberry Pi, or more advanced hardware with multiple inputs/outputs like MqGateway . UniGateway supports cheap, Arduino-compatible modules for sensors and controllers. It includes relay modules, buttons and temperature sensors. UniGateway works with wired sensors and controllers to avoid the problem with batteries and radio noise. Additionally, if you want to manage devices with UniGateway - you are not expected to know anything about programming. All you need to prepare is a YAML configuration file . UniGateway is for you if you: Want to save money on sensors and controllers. Prefer wired over wireless components. Like to limit number of microcontrollers for sensors. Don't want to program microcontrollers yourself. Don't like to be tied to single hardware. Look for a solution which is fully local, open and extensible. As mentioned earlier, common home automation system consists of multiple sensors distributed around the house. You need to connect those to home automation application which is running on a computer connected to home network. A simple relay or temperature sensor modules (e.g. DTH22) do not have Wi-Fi or Ethernet port. Instead, they can be controlled (or send information) with single digital wire. UniGateway will work as a proxy between those sensors and home automation application. For the external communication, UniGateway supports WebSockets or MQTT. This makes it easy to integrate it with most of the open home automation applications (including OpenHAB and Home Assistant). What's next? Quick start with Raspberry Pi Quick start with MqGateway","title":"Introduction"},{"location":"user-guide/introduction/#why-and-when-to-use-it","text":"Typical smart home solution is based on multiple sensors and controllers distributed around the house (e.g. temperature, motion, light sensors, switch buttons, relays, buzzers). Central component of the system is home automation application like OpenHab or Home Assistant which allows you to set rules and control devices with graphical interface and mobile application. Binding those elements is usually done either with some vendor gateway (e.g. Z-Wave Gateway) or by connecting sensors to microcontroller (e.g. ESP8266, Arduino) which communicates with home automation application. The problem with the vendor gateway solution is these are mostly wireless and often closed solution. This unfortunately means - monitoring and changing batteries (plus a lot of radio waves around the house). Additionally, vendor sensors are relatively expensive comparing to the bare modules which are usually used with Raspberry Pi or Arduino. Connecting a sensor to Arduino or similar microcontroller will save a lot of money on sensors, because you can use cheap, ready-to-use modules, but you still need to send data from microcontroller to home automation application. This can be done wireless (WiFi or RF), but it gets us back to the problem with batteries and radio noise. Even if you add wired connection (e.g. ethernet) to microcontroller, having single microcontroller for each one or two sensors is not very cost-effective. Problems described above are the ones UniGateway is trying to solve. List of supported devices (sensors/controllers) can be found on supported devices page. It is possible to install UniGateway on single-board computer (SBC) like Raspberry Pi, or more advanced hardware with multiple inputs/outputs like MqGateway . UniGateway supports cheap, Arduino-compatible modules for sensors and controllers. It includes relay modules, buttons and temperature sensors. UniGateway works with wired sensors and controllers to avoid the problem with batteries and radio noise. Additionally, if you want to manage devices with UniGateway - you are not expected to know anything about programming. All you need to prepare is a YAML configuration file . UniGateway is for you if you: Want to save money on sensors and controllers. Prefer wired over wireless components. Like to limit number of microcontrollers for sensors. Don't want to program microcontrollers yourself. Don't like to be tied to single hardware. Look for a solution which is fully local, open and extensible. As mentioned earlier, common home automation system consists of multiple sensors distributed around the house. You need to connect those to home automation application which is running on a computer connected to home network. A simple relay or temperature sensor modules (e.g. DTH22) do not have Wi-Fi or Ethernet port. Instead, they can be controlled (or send information) with single digital wire. UniGateway will work as a proxy between those sensors and home automation application. For the external communication, UniGateway supports WebSockets or MQTT. This makes it easy to integrate it with most of the open home automation applications (including OpenHAB and Home Assistant).","title":"Why and when to use it?"},{"location":"user-guide/introduction/#whats-next","text":"Quick start with Raspberry Pi Quick start with MqGateway","title":"What's next?"},{"location":"user-guide/logging/","text":"In case of any problems it is worth to look into UniGateway logs. This page describes where to find logs. Current log file Current logs of UniGateway application can be found in logs/application.log file. Path is relative from where UniGateway is started. Default location is /opt/unigateway/logs/application.log . Logs rotation Log files are rolled every day at midnight. Logs from previous days can be found in files with named: logs/app-%d{yyyy-MM-dd}.log . Log files older than 30 days are deleted automatically.","title":"Logging"},{"location":"user-guide/logging/#current-log-file","text":"Current logs of UniGateway application can be found in logs/application.log file. Path is relative from where UniGateway is started. Default location is /opt/unigateway/logs/application.log .","title":"Current log file"},{"location":"user-guide/logging/#logs-rotation","text":"Log files are rolled every day at midnight. Logs from previous days can be found in files with named: logs/app-%d{yyyy-MM-dd}.log . Log files older than 30 days are deleted automatically.","title":"Logs rotation"},{"location":"user-guide/quick-start-mqgateway/","text":"Quick start guide shows how to connect a relay module and configure MqGateway to control it. Connecting other types of devices is similar and can be done with the similar steps. Remember that electricity can be dangerous. You can try this guide without high voltage electricity, only with 5V power and relay module (EMR type). This way is much safer, and you still will be able to know it works correctly, because toggling this type of relay can be easily heard. What do you need MqGateway with NanoPI NEO SD card (minimum 8GB) Relay module (EMR) with screw connectors Ethernet cable (with RJ45 connector on one side only) to connect relay module Connect and configure device Warning Make sure MqGateway is never connected to power supply and micro USB port at the same time. This will destroy the device and may damage your computer. Download UniGateway SD card image for MqGateway from here . Flash SD card with UniGateway (you can use Balena Etcher ). Insert SD card to NanoPi NEO in MqGateway and power up MqGateway. Connect MqGateway to your router with ethernet cable and power up MqGateway. Prepare ethernet cable with the connector on one side (according to standard T568B). Connect relay module to ethernet cable (see table below and photo ). module pin wire color VCC/DC+ orange ground/DC- orange-white control/IN blue Connect the module to MqGateway port number 1 ( ports ). Open browser and go to http://unigateway.local:8080/ui . Take into account that it may take a few minutes for Unigateway to start after booting MqGateway. Go to \"Devices\". Change the switch for \"Workshop light\". State of the relay should change. You should easily hear the characteristic click of the EMR relay. You can try toggle device state for a few more times to check that. Congratulation! You have just configured your first device with UniGateway on MqGateway \ud83c\udf89. What's next? What to do after installation Find out all supported devices Enable MQTT and Home Assistant integrations","title":"Quick Start (MqGateway)"},{"location":"user-guide/quick-start-mqgateway/#what-do-you-need","text":"MqGateway with NanoPI NEO SD card (minimum 8GB) Relay module (EMR) with screw connectors Ethernet cable (with RJ45 connector on one side only) to connect relay module","title":"What do you need"},{"location":"user-guide/quick-start-mqgateway/#connect-and-configure-device","text":"Warning Make sure MqGateway is never connected to power supply and micro USB port at the same time. This will destroy the device and may damage your computer. Download UniGateway SD card image for MqGateway from here . Flash SD card with UniGateway (you can use Balena Etcher ). Insert SD card to NanoPi NEO in MqGateway and power up MqGateway. Connect MqGateway to your router with ethernet cable and power up MqGateway. Prepare ethernet cable with the connector on one side (according to standard T568B). Connect relay module to ethernet cable (see table below and photo ). module pin wire color VCC/DC+ orange ground/DC- orange-white control/IN blue Connect the module to MqGateway port number 1 ( ports ). Open browser and go to http://unigateway.local:8080/ui . Take into account that it may take a few minutes for Unigateway to start after booting MqGateway. Go to \"Devices\". Change the switch for \"Workshop light\". State of the relay should change. You should easily hear the characteristic click of the EMR relay. You can try toggle device state for a few more times to check that. Congratulation! You have just configured your first device with UniGateway on MqGateway \ud83c\udf89.","title":"Connect and configure device"},{"location":"user-guide/quick-start-mqgateway/#whats-next","text":"What to do after installation Find out all supported devices Enable MQTT and Home Assistant integrations","title":"What's next?"},{"location":"user-guide/quick-start-raspberrypi/","text":"Quick start guide shows how to connect a relay module to Raspberry Pi and configure UniGateway to control it. Connecting other types of devices is similar and can be done with the similar steps. Remember that electricity can be dangerous. You can try this guide without high voltage electricity, only with 5V power and relay module (EMR type). This way is much safer, and you still will be able to know it works correctly, because toggling this type of relay can be easily heard. What do you need Raspberry Pi (3 or 4) SD card (minimum 8GB) Relay module (EMR) Wires to connect Raspberry Pi pins with relay pins Connect and configure device Download UniGateway SD card image for RaspberryPi from here . Flash SD card with UniGateway (you can use Balena Etcher ). Insert SD card to Raspberry Pi. Connect Raspberry Pi to your router with ethernet cable and power up Raspberry Pi. Connect relay module to RaspberryPi (see table below and photo ). Raspberry Pi Relay module 5V VCC/DC+ Ground ground/DC- GPIO17 control/IN Open browser and go to http://unigateway.local:8080/ui . Take into account that it may take a few minutes for Unigateway to start after booting Raspberry Pi. Go to \"Devices\"/. Change the switch for \"Workshop light\". State of the relay should change. You should easily hear the characteristic click of the EMR relay. You can try toggle device state for a few more times to check that. Congratulation! You have just configured your first device with UniGateway on Raspberry Pi \ud83c\udf89. What's next? What to do after installation Find out all supported devices Enable MQTT and Home Assistant integrations","title":"Quick Start (Raspberry Pi)"},{"location":"user-guide/quick-start-raspberrypi/#what-do-you-need","text":"Raspberry Pi (3 or 4) SD card (minimum 8GB) Relay module (EMR) Wires to connect Raspberry Pi pins with relay pins","title":"What do you need"},{"location":"user-guide/quick-start-raspberrypi/#connect-and-configure-device","text":"Download UniGateway SD card image for RaspberryPi from here . Flash SD card with UniGateway (you can use Balena Etcher ). Insert SD card to Raspberry Pi. Connect Raspberry Pi to your router with ethernet cable and power up Raspberry Pi. Connect relay module to RaspberryPi (see table below and photo ). Raspberry Pi Relay module 5V VCC/DC+ Ground ground/DC- GPIO17 control/IN Open browser and go to http://unigateway.local:8080/ui . Take into account that it may take a few minutes for Unigateway to start after booting Raspberry Pi. Go to \"Devices\"/. Change the switch for \"Workshop light\". State of the relay should change. You should easily hear the characteristic click of the EMR relay. You can try toggle device state for a few more times to check that. Congratulation! You have just configured your first device with UniGateway on Raspberry Pi \ud83c\udf89.","title":"Connect and configure device"},{"location":"user-guide/quick-start-raspberrypi/#whats-next","text":"What to do after installation Find out all supported devices Enable MQTT and Home Assistant integrations","title":"What's next?"},{"location":"user-guide/supported-devices/","text":"This is a list of devices currently supported by UniGateway. That means you can connect a device with wires to UniGateway and control it. Danger Electricity can be very harmful! Please do not connect anything to electricity yourself if you don't have enough knowledge, and you are not completely sure what you are doing. Simple devices Relay module Relay module which allows turning on/off electrical devices and lights. Controlled with LOW signal by default. configuration type: RELAY additional configuration: triggerLevel [one of: LOW , HIGH] - The signal LEVEL which triggers the relay and closes the circuit haComponent [one of: switch , light] - type of the entity for Home Assistant MQTT discovery haDeviceClass [one of: switch , outlet] - only if haComponent is switch , device class of switch for Home Assistant MQTT discovery Example configuration devices : - id : \"workshop_light\" type : RELAY name : \"Workshop light\" connectors : state : # connector configuration example for RaspberryPi gpio : 23 config : triggerLevel : \"LOW\" haComponent : \"light\" Wiring Both solid-state (SSR) relay and electromechanical (EMR) relay module, working with correct voltage for used hardware, can be used. Any digital output pin can be used for communication. Switch button Switch button or push button. configuration type: SWITCH_BUTTON additional configuration: longPressTimeMs [default: 1000] - if switch button is pressed for longer then this value (in milliseconds) then \"long press\" event is sent from MqGateway haComponent [one of: binary_sensor , trigger, sensor] - type of the entity for Home Assistant MQTT discovery Example configuration devices : - id : \"workshop_light_switch\" type : SWITCH_BUTTON name : \"Workshop light switch\" connectors : state : # connector configuration example for MqGateway portNumber : 1 wireColor : \"BLUE_WHITE\" config : longPressTimeMs : 800 haComponent : \"sensor\" Wiring Any regular switch/push button can be used for that. Any digital input pin can be used for communication. Emulated switch Emulates switch button press with changing digital output from HIGH to LOW for 500ms and back to HIGH state. It is useful for controlling devices which has possibility to connect switch button (e.g. garage gate opener). configuration type: EMULATED_SWITCH additional configuration: NONE Example configuration devices : - id : \"garage_gate_switch\" type : EMULATED_SWITCH name : \"Garage gate switch\" connectors : state : # connector configuration example for MqGateway portNumber : 1 wires : BLUE_WHITE Wiring Emulated switch is realized using electromechanical relay (EMR - the most common type). Between UniGateway hardware and the relay any digital output pin can be used for communication. Between the relay and gate opener, use COM and NO on the relay. On the gate opener side - connect wires according to your gate opener manual for connecting wall switch button. Motion detector PIR Motion Sensor/Detector. configuration type: MOTION_DETECTOR additional configuration: motionSignalLevel [one of: HIGH , LOW] - The signal LEVEL which means that motion has been detected Example configuration devices : - id : \"garage_motion\" type : MOTION_DETECTOR name : \"Garage motion\" connectors : state : # connector configuration example for MqGateway portNumber : 4 wireColor : GREEN debounceMs : 100 config : motionSignalLevel : HIGH Wiring Any digital input pin can be used for communication. Reed switch A magnetic sensor which might be used to check if door or window is open/closed. configuration type: REED_SWITCH additional configuration: haDeviceClass [one of: opening , window, door, garage_door, ...] - choose from device class of binary sensor for Home Assistant MQTT discovery Example configuration devices : - id : \"workshop_door\" type : REED_SWITCH name : \"Workshop door\" connectors : state : # connector configuration example for RaspberryPi gpio : 24 config : haDeviceClass : \"door\" Wiring Any reed switch can be used for that. Any of the digital input pins can be used. Timer switch Switch which can be turned on for a given time and will be automatically turned off after that time. Typical use case for this device is a sprinkler system which you want to turn off after specified time even if your main automation system has failed for any reason. configuration type: TIMER_SWITCH additional configuration: NONE Example configuration devices : - id : \"sprinklers_zone_1\" type : TIMER_SWITCH name : \"Sprinklers zone 1\" connectors : state : # connector configuration example for RaspberryPi gpio : 24 Wiring Both solid-state (SSR) relay and electromechanical (EMR) relay module, working with correct voltage for used hardware, can be used. Any digital output pin can be used for communication. Temperature sensor Temperature sensor. Examples are BME280, DHT22, DS18B20, SHT31. Currently requires MySensors node. configuration type: TEMPERATURE additional configuration: minUpdateIntervalMs [default: 0] - minimum interval (in milliseconds) between two consecutive updates of temperature. Any additional updates from the sensor will be ignored. Example configuration devices : - name : \"Workshop temperature\" id : \"workshop_temperature\" type : TEMPERATURE connectors : state : source : MYSENSORS nodeId : 10 sensorId : 1 type : V_TEMP config : minUpdateIntervalMs : 60000 # optional - it will send updates with the maximum frequency of 1 minute Humidity sensor Humidity sensor. Examples are BME280, DHT22, SHT31. Currently requires MySensors node. configuration type: HUMIDITY additional configuration: minUpdateIntervalMs [default: 0] - minimum interval (in milliseconds) between two consecutive updates of temperature. Any additional updates from the sensor will be ignored. Example configuration devices : - name : \"Workshop humidity\" id : \"workshop_humidity\" type : HUMIDITY connectors : state : source : MYSENSORS nodeId : 10 sensorId : 0 type : V_HUM config : minUpdateIntervalMs : 60000 # optional - it will send updates with the maximum frequency of 1 minute Complex devices Complex devices are composed of multiple other devices. Light Light (controlled by the relay) with one or more switches to toggle it. Allows to control the light with physical wall switches/buttons even if external automation controller (e.g. Home Assistant or OpenHab) is not working. configuration type: LIGHT internal devices: relay ( relay ) [required] switch1 ( switch button ) [optional] switch2 ( switch button ) [optional] switch3 ( switch button ) [optional] Example configuration devices : - name : \"Living room light\" id : \"living_room_light\" type : LIGHT internalDevices : relay : referenceId : lr_light_relay switch1 : referenceId : lr_light_switch1 switch2 : referenceId : lr_light_switch2 # Internal devices used by living_room_shutter - name : \"Living room light relay\" id : \"lr_light_relay\" type : RELAY connectors : state : # connector configuration example for MqGateway portNumber : 11 wireColor : BLUE - name : \"Living Room light switch near entrance\" id : \"lr_light_switch1\" type : RELAY connectors : state : # connector configuration example for MqGateway portNumber : 11 wireColor : BLUE_WHITE - name : \"Living Room light switch near kitchen\" id : \"lr_light_switch2\" type : RELAY connectors : state : # connector configuration example for MqGateway portNumber : 12 wireColor : BLUE_WHITE Wiring Light is realized using electromechanical (EMR) relay module and optional switch buttons. See relay and switch button devices descriptions to learn how to connect them. Window shutter Window shutter/roller blind control. Replaces the regular switch button control with 2-channels relay module. Allows to fully open/close shutters and partial opening with percentage (e.g. 30% open). configuration type: SHUTTER internal devices: stopRelay ( relay ) [required] upDownRelay ( relay ) [required] additional configuration: fullCloseTimeMs [required] - time in milliseconds for the shutter from being fully open to fully closed fullOpenTimeMs [required] - time in milliseconds for the shutter from being fully closed to fully open Example configuration devices : - name : \"Living room shutter\" id : \"living_room_shutter\" type : SHUTTER internalDevices : stopRelay : referenceId : lr_shutter_stop_relay upDownRelay : referenceId : lr_shutter_updown_relay config : fullCloseTimeMs : 20000 fullOpenTimeMs : 27000 # Internal devices used by living_room_shutter - name : \"livingroom left shutter stop relay\" id : \"lr_shutter_stop_relay\" type : RELAY connectors : state : # connector configuration example for MqGateway portNumber : 14 wireColor : GREEN - name : \"livingroom left shutter up-down relay\" id : \"lr_shutter_updown_relay\" type : RELAY connectors : state : # connector configuration example for MqGateway portNumber : 14 wireColor : GREEN_WHITE Wiring Window roller shutters are realized using 2-channel electromechanical (EMR) relay module (one relay for going up/down and another one relay for the stop/start). Between UniGateway hardware and the 2-channel relay module any digital output pins can be used. Connect neutral wire and earth directly to the roller shutter wires. Between relay module and roller shutter control: RELAY 1 CONNECTOR COM Live wire (from grid) NO Wire to Relay 2 COM NC nothing RELAY 2 CONNECTOR COM Wire from Relay 1 NO NO Go up wire from shutter NC Go down wire from shutter Gate / garage door Garage door or gate (fence) control. Use connection in the gate opener usually used to connect control buttons. It may be eiter single button ( actionButton ) or three separate buttons ( openButton, closeButton and stopButton ). It is possible to add open and closed reed switches for better control and position information ( openReedSwitch and closedReedSwitch ). Emulated switches are realized with relay modules. configuration type: GATE internal devices: actionButton ( emulated switch ) - either this one or stopButton , openButton and closeButton are required stopButton ( emulated switch ) - either this one or actionButton is required openButton ( emulated switch ) - either this one or actionButton is required closeButton ( emulated switch ) - either this one or actionButton is required openReedSwitch ( reed switch ) closedReedSwitch ( reed switch ) additional configuration: haDeviceClass [one of: garage , gate] - device class of cover for Home Assistant MQTT discovery Example configuration Single (open/close/stop) button garage door or gate devices : - id : \"garage_door\" type : GATE name : \"Garage door\" internalDevices : actionButton : referenceId : \"garage_door_action_button\" closedReedSwitch : referenceId : \"garage_door_closed_reed\" # Internal devices used by garage_door - id : \"garage_door_action_button\" name : \"Garage door action button\" type : EMULATED_SWITCH connectors : state : # connector configuration example for MqGateway portNumber : 1 wires : BLUE_WHITE - id : \"garage_door_closed_reed\" name : \"Garage door closed\" type : REED_SWITCH connectors : state : # connector configuration example for MqGateway portNumber : 3 wireColor : GREEN_WHITE Three buttons (open/close/stop) button garage door or gate devices : - name : \"Entrance gate\" id : \"entrance_gate\" type : GATE internalDevices : openButton : referenceId : \"entrance_gate_open\" closeButton : referenceId : \"entrance_gate_close\" stopButton : referenceId : \"entrance_gate_stop\" closedReedSwitch : referenceId : \"gate_reed_switch\" config : haDeviceClass : gate # \"garage\" by default - name : \"Open - entrance gate\" id : \"entrance_gate_open\" type : EMULATED_SWITCH connectors : state : portNumber : 20 wireColor : BLUE_WHITE - name : \"Close - entrance gate\" id : \"entrance_gate_close\" type : EMULATED_SWITCH connectors : state : portNumber : 20 wireColor : BLUE - name : \"Stop - entrance gate\" id : \"entrance_gate_stop\" type : EMULATED_SWITCH connectors : state : portNumber : 20 wireColor : GREEN - name : \"Gate reed switch\" id : \"gate_reed_switch\" type : REED_SWITCH connectors : state : portNumber : 16 wireColor : BLUE_WHITE Wiring Single button gate (garage door) is realized using electromechanical (EMR) relay module to emulate push button. Between UniGateway hardware and the relay module use any digital output pin for control. Relay module should be connected with COM and NO to the gate (garage door) opener in the place for connecting push button. RELAY CONNECTOR COM button connection wire NO button connection wire NC nothing Three buttons gate (garage door) is realized using 3-channel electromechanical (EMR) relay module to emulate push button for each function. Between UniGateway hardware and the 3-channel relay module use three separate digital output pins for control. Each relay module should be connected with COM and NO to the gate (garage door) opener in the place for connecting push button. This connection needs to be repeated for each relay - button. RELAY 1,2,3 CONNECTOR COM button connection wire NO button connection wire NC nothing","title":"Supported devices"},{"location":"user-guide/supported-devices/#simple-devices","text":"","title":"Simple devices"},{"location":"user-guide/supported-devices/#relay-module","text":"Relay module which allows turning on/off electrical devices and lights. Controlled with LOW signal by default. configuration type: RELAY additional configuration: triggerLevel [one of: LOW , HIGH] - The signal LEVEL which triggers the relay and closes the circuit haComponent [one of: switch , light] - type of the entity for Home Assistant MQTT discovery haDeviceClass [one of: switch , outlet] - only if haComponent is switch , device class of switch for Home Assistant MQTT discovery Example configuration devices : - id : \"workshop_light\" type : RELAY name : \"Workshop light\" connectors : state : # connector configuration example for RaspberryPi gpio : 23 config : triggerLevel : \"LOW\" haComponent : \"light\" Wiring Both solid-state (SSR) relay and electromechanical (EMR) relay module, working with correct voltage for used hardware, can be used. Any digital output pin can be used for communication.","title":"Relay module"},{"location":"user-guide/supported-devices/#switch-button","text":"Switch button or push button. configuration type: SWITCH_BUTTON additional configuration: longPressTimeMs [default: 1000] - if switch button is pressed for longer then this value (in milliseconds) then \"long press\" event is sent from MqGateway haComponent [one of: binary_sensor , trigger, sensor] - type of the entity for Home Assistant MQTT discovery Example configuration devices : - id : \"workshop_light_switch\" type : SWITCH_BUTTON name : \"Workshop light switch\" connectors : state : # connector configuration example for MqGateway portNumber : 1 wireColor : \"BLUE_WHITE\" config : longPressTimeMs : 800 haComponent : \"sensor\" Wiring Any regular switch/push button can be used for that. Any digital input pin can be used for communication.","title":"Switch button"},{"location":"user-guide/supported-devices/#emulated-switch","text":"Emulates switch button press with changing digital output from HIGH to LOW for 500ms and back to HIGH state. It is useful for controlling devices which has possibility to connect switch button (e.g. garage gate opener). configuration type: EMULATED_SWITCH additional configuration: NONE Example configuration devices : - id : \"garage_gate_switch\" type : EMULATED_SWITCH name : \"Garage gate switch\" connectors : state : # connector configuration example for MqGateway portNumber : 1 wires : BLUE_WHITE Wiring Emulated switch is realized using electromechanical relay (EMR - the most common type). Between UniGateway hardware and the relay any digital output pin can be used for communication. Between the relay and gate opener, use COM and NO on the relay. On the gate opener side - connect wires according to your gate opener manual for connecting wall switch button.","title":"Emulated switch"},{"location":"user-guide/supported-devices/#motion-detector","text":"PIR Motion Sensor/Detector. configuration type: MOTION_DETECTOR additional configuration: motionSignalLevel [one of: HIGH , LOW] - The signal LEVEL which means that motion has been detected Example configuration devices : - id : \"garage_motion\" type : MOTION_DETECTOR name : \"Garage motion\" connectors : state : # connector configuration example for MqGateway portNumber : 4 wireColor : GREEN debounceMs : 100 config : motionSignalLevel : HIGH Wiring Any digital input pin can be used for communication.","title":"Motion detector"},{"location":"user-guide/supported-devices/#reed-switch","text":"A magnetic sensor which might be used to check if door or window is open/closed. configuration type: REED_SWITCH additional configuration: haDeviceClass [one of: opening , window, door, garage_door, ...] - choose from device class of binary sensor for Home Assistant MQTT discovery Example configuration devices : - id : \"workshop_door\" type : REED_SWITCH name : \"Workshop door\" connectors : state : # connector configuration example for RaspberryPi gpio : 24 config : haDeviceClass : \"door\" Wiring Any reed switch can be used for that. Any of the digital input pins can be used.","title":"Reed switch"},{"location":"user-guide/supported-devices/#timer-switch","text":"Switch which can be turned on for a given time and will be automatically turned off after that time. Typical use case for this device is a sprinkler system which you want to turn off after specified time even if your main automation system has failed for any reason. configuration type: TIMER_SWITCH additional configuration: NONE Example configuration devices : - id : \"sprinklers_zone_1\" type : TIMER_SWITCH name : \"Sprinklers zone 1\" connectors : state : # connector configuration example for RaspberryPi gpio : 24 Wiring Both solid-state (SSR) relay and electromechanical (EMR) relay module, working with correct voltage for used hardware, can be used. Any digital output pin can be used for communication.","title":"Timer switch"},{"location":"user-guide/supported-devices/#temperature-sensor","text":"Temperature sensor. Examples are BME280, DHT22, DS18B20, SHT31. Currently requires MySensors node. configuration type: TEMPERATURE additional configuration: minUpdateIntervalMs [default: 0] - minimum interval (in milliseconds) between two consecutive updates of temperature. Any additional updates from the sensor will be ignored. Example configuration devices : - name : \"Workshop temperature\" id : \"workshop_temperature\" type : TEMPERATURE connectors : state : source : MYSENSORS nodeId : 10 sensorId : 1 type : V_TEMP config : minUpdateIntervalMs : 60000 # optional - it will send updates with the maximum frequency of 1 minute","title":"Temperature sensor"},{"location":"user-guide/supported-devices/#humidity-sensor","text":"Humidity sensor. Examples are BME280, DHT22, SHT31. Currently requires MySensors node. configuration type: HUMIDITY additional configuration: minUpdateIntervalMs [default: 0] - minimum interval (in milliseconds) between two consecutive updates of temperature. Any additional updates from the sensor will be ignored. Example configuration devices : - name : \"Workshop humidity\" id : \"workshop_humidity\" type : HUMIDITY connectors : state : source : MYSENSORS nodeId : 10 sensorId : 0 type : V_HUM config : minUpdateIntervalMs : 60000 # optional - it will send updates with the maximum frequency of 1 minute","title":"Humidity sensor"},{"location":"user-guide/supported-devices/#complex-devices","text":"Complex devices are composed of multiple other devices.","title":"Complex devices"},{"location":"user-guide/supported-devices/#light","text":"Light (controlled by the relay) with one or more switches to toggle it. Allows to control the light with physical wall switches/buttons even if external automation controller (e.g. Home Assistant or OpenHab) is not working. configuration type: LIGHT internal devices: relay ( relay ) [required] switch1 ( switch button ) [optional] switch2 ( switch button ) [optional] switch3 ( switch button ) [optional] Example configuration devices : - name : \"Living room light\" id : \"living_room_light\" type : LIGHT internalDevices : relay : referenceId : lr_light_relay switch1 : referenceId : lr_light_switch1 switch2 : referenceId : lr_light_switch2 # Internal devices used by living_room_shutter - name : \"Living room light relay\" id : \"lr_light_relay\" type : RELAY connectors : state : # connector configuration example for MqGateway portNumber : 11 wireColor : BLUE - name : \"Living Room light switch near entrance\" id : \"lr_light_switch1\" type : RELAY connectors : state : # connector configuration example for MqGateway portNumber : 11 wireColor : BLUE_WHITE - name : \"Living Room light switch near kitchen\" id : \"lr_light_switch2\" type : RELAY connectors : state : # connector configuration example for MqGateway portNumber : 12 wireColor : BLUE_WHITE Wiring Light is realized using electromechanical (EMR) relay module and optional switch buttons. See relay and switch button devices descriptions to learn how to connect them.","title":"Light"},{"location":"user-guide/supported-devices/#window-shutter","text":"Window shutter/roller blind control. Replaces the regular switch button control with 2-channels relay module. Allows to fully open/close shutters and partial opening with percentage (e.g. 30% open). configuration type: SHUTTER internal devices: stopRelay ( relay ) [required] upDownRelay ( relay ) [required] additional configuration: fullCloseTimeMs [required] - time in milliseconds for the shutter from being fully open to fully closed fullOpenTimeMs [required] - time in milliseconds for the shutter from being fully closed to fully open Example configuration devices : - name : \"Living room shutter\" id : \"living_room_shutter\" type : SHUTTER internalDevices : stopRelay : referenceId : lr_shutter_stop_relay upDownRelay : referenceId : lr_shutter_updown_relay config : fullCloseTimeMs : 20000 fullOpenTimeMs : 27000 # Internal devices used by living_room_shutter - name : \"livingroom left shutter stop relay\" id : \"lr_shutter_stop_relay\" type : RELAY connectors : state : # connector configuration example for MqGateway portNumber : 14 wireColor : GREEN - name : \"livingroom left shutter up-down relay\" id : \"lr_shutter_updown_relay\" type : RELAY connectors : state : # connector configuration example for MqGateway portNumber : 14 wireColor : GREEN_WHITE Wiring Window roller shutters are realized using 2-channel electromechanical (EMR) relay module (one relay for going up/down and another one relay for the stop/start). Between UniGateway hardware and the 2-channel relay module any digital output pins can be used. Connect neutral wire and earth directly to the roller shutter wires. Between relay module and roller shutter control: RELAY 1 CONNECTOR COM Live wire (from grid) NO Wire to Relay 2 COM NC nothing RELAY 2 CONNECTOR COM Wire from Relay 1 NO NO Go up wire from shutter NC Go down wire from shutter","title":"Window shutter"},{"location":"user-guide/supported-devices/#gate-garage-door","text":"Garage door or gate (fence) control. Use connection in the gate opener usually used to connect control buttons. It may be eiter single button ( actionButton ) or three separate buttons ( openButton, closeButton and stopButton ). It is possible to add open and closed reed switches for better control and position information ( openReedSwitch and closedReedSwitch ). Emulated switches are realized with relay modules. configuration type: GATE internal devices: actionButton ( emulated switch ) - either this one or stopButton , openButton and closeButton are required stopButton ( emulated switch ) - either this one or actionButton is required openButton ( emulated switch ) - either this one or actionButton is required closeButton ( emulated switch ) - either this one or actionButton is required openReedSwitch ( reed switch ) closedReedSwitch ( reed switch ) additional configuration: haDeviceClass [one of: garage , gate] - device class of cover for Home Assistant MQTT discovery Example configuration Single (open/close/stop) button garage door or gate devices : - id : \"garage_door\" type : GATE name : \"Garage door\" internalDevices : actionButton : referenceId : \"garage_door_action_button\" closedReedSwitch : referenceId : \"garage_door_closed_reed\" # Internal devices used by garage_door - id : \"garage_door_action_button\" name : \"Garage door action button\" type : EMULATED_SWITCH connectors : state : # connector configuration example for MqGateway portNumber : 1 wires : BLUE_WHITE - id : \"garage_door_closed_reed\" name : \"Garage door closed\" type : REED_SWITCH connectors : state : # connector configuration example for MqGateway portNumber : 3 wireColor : GREEN_WHITE Three buttons (open/close/stop) button garage door or gate devices : - name : \"Entrance gate\" id : \"entrance_gate\" type : GATE internalDevices : openButton : referenceId : \"entrance_gate_open\" closeButton : referenceId : \"entrance_gate_close\" stopButton : referenceId : \"entrance_gate_stop\" closedReedSwitch : referenceId : \"gate_reed_switch\" config : haDeviceClass : gate # \"garage\" by default - name : \"Open - entrance gate\" id : \"entrance_gate_open\" type : EMULATED_SWITCH connectors : state : portNumber : 20 wireColor : BLUE_WHITE - name : \"Close - entrance gate\" id : \"entrance_gate_close\" type : EMULATED_SWITCH connectors : state : portNumber : 20 wireColor : BLUE - name : \"Stop - entrance gate\" id : \"entrance_gate_stop\" type : EMULATED_SWITCH connectors : state : portNumber : 20 wireColor : GREEN - name : \"Gate reed switch\" id : \"gate_reed_switch\" type : REED_SWITCH connectors : state : portNumber : 16 wireColor : BLUE_WHITE Wiring Single button gate (garage door) is realized using electromechanical (EMR) relay module to emulate push button. Between UniGateway hardware and the relay module use any digital output pin for control. Relay module should be connected with COM and NO to the gate (garage door) opener in the place for connecting push button. RELAY CONNECTOR COM button connection wire NO button connection wire NC nothing Three buttons gate (garage door) is realized using 3-channel electromechanical (EMR) relay module to emulate push button for each function. Between UniGateway hardware and the 3-channel relay module use three separate digital output pins for control. Each relay module should be connected with COM and NO to the gate (garage door) opener in the place for connecting push button. This connection needs to be repeated for each relay - button. RELAY 1,2,3 CONNECTOR COM button connection wire NO button connection wire NC nothing","title":"Gate / garage door"},{"location":"user-guide/troubleshooting/","text":"Switch button doesn't work properly - sometimes it sends message multiple times even when pressed once Debounce value is too low. See connectors configuration for your hardware to see how to increase debounce value for connector.","title":"Troubleshooting"},{"location":"user-guide/troubleshooting/#switch-button-doesnt-work-properly-sometimes-it-sends-message-multiple-times-even-when-pressed-once","text":"Debounce value is too low. See connectors configuration for your hardware to see how to increase debounce value for connector.","title":"Switch button doesn't work properly - sometimes it sends message multiple times even when pressed once"}]}