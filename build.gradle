plugins {
    id "groovy"
    id 'org.jetbrains.kotlin.jvm' version "${kotlinVersion}"
    id "org.jetbrains.kotlin.kapt" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.plugin.allopen" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.plugin.serialization" version "${kotlinVersion}"
    id "org.jlleitschuh.gradle.ktlint" version "10.0.0"
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "pl.allegro.tech.build.axion-release" version "1.11.0"
    id "io.micronaut.application" version "3.2.1"
}

repositories {
    mavenCentral()
}

dependencies {
    // Micronaut
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut:micronaut-http-server-netty")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-management")
    implementation("io.micronaut.micrometer:micronaut-micrometer-core")
    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-prometheus")
    implementation("io.micronaut.kotlin:micronaut-kotlin-extension-functions")
    implementation("io.micronaut.cache:micronaut-cache-caffeine")

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-cbor:1.3.2"

    // YAML parsing
    implementation 'com.networknt:json-schema-validator:1.0.65'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'

    // Logging
    implementation 'io.github.microutils:kotlin-logging-jvm:2.1.21'
    implementation 'ch.qos.logback:logback-classic'

    // DioZero
    implementation 'com.diozero:diozero-core:1.3.2'

    // Oshi - Library for SystemInfoProvider
    implementation 'com.github.oshi:oshi-core-java11:6.1.4'

    // Serial library for my sensors
    implementation 'com.fazecast:jSerialComm:[2.0.0,3.0.0)'

    // MQTT
    implementation 'com.hivemq:hivemq-mqtt-client:1.3.0'
    compileOnly 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.2'

    // Avahi / ZeroConf / Multicast DNS
    implementation 'org.jmdns:jmdns:3.5.7'

    // Tests
    testImplementation(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
    testImplementation("io.micronaut:micronaut-inject-groovy")
    testImplementation('org.codehaus.groovy:groovy:3.0.8')
    testImplementation('org.codehaus.groovy:groovy-json:3.0.8')
    testImplementation('org.codehaus.groovy:groovy-yaml:3.0.8')
    testImplementation(platform("org.spockframework:spock-bom:2.0-M5-groovy-3.0"))
    testImplementation("org.spockframework:spock-core") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
    testImplementation("io.micronaut.test:micronaut-test-spock")
    testImplementation("net.bytebuddy:byte-buddy:1.12.8")
    testImplementation(platform("org.testcontainers:testcontainers-bom:1.15.3"))
    testImplementation("org.testcontainers:spock")
}

mainClassName = "com.unigateway.ApplicationKt"

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
}

java {
    sourceCompatibility = JavaVersion.toVersion('1.8')
}

tasks {
    compileKotlin {
        kotlinOptions {
            jvmTarget = "11"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "11"
        }
    }
}

micronaut {
    runtime("netty")
    testRuntime("spock2")
    processing {
        incremental(true)
        annotations("com.unigateway.*")
    }
}

shadowJar {
    mergeServiceFiles()
}

scmVersion {
    versionIncrementer 'incrementMinor'
    versionCreator { version, position ->
        return "$version-${position.shortRevision}"
    }
}

group 'com.unigateway'
version = scmVersion.version

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    def props = [version: version]
    from ('src/main/resources') {
        include 'application.yml'
        expand (props)
    }
}

processResources.outputs.upToDateWhen { false }
