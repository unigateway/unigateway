plugins {
    id "groovy"
    id "application"
    id 'org.jetbrains.kotlin.jvm' version "${kotlinVersion}"
    id "org.jetbrains.kotlin.kapt" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.plugin.allopen" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.plugin.serialization" version "${kotlinVersion}"
    id "org.jlleitschuh.gradle.ktlint" version "10.0.0"
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "pl.allegro.tech.build.axion-release" version "1.11.0"
    id "com.github.node-gradle.node" version "3.1.1"
}

repositories {
    mavenCentral()
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    // Micronaut
    kapt(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    kapt("io.micronaut:micronaut-inject-java")
    kapt("io.micronaut:micronaut-validation")
    implementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    implementation("io.micronaut:micronaut-inject")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-http-server-netty")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-management")
    implementation("io.micronaut.micrometer:micronaut-micrometer-core")
    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-prometheus")
    implementation("io.micronaut.kotlin:micronaut-kotlin-extension-functions")
    implementation("io.micronaut.cache:micronaut-cache-caffeine")

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.3"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-cbor:1.1.0"

    // YAML parsing
    implementation 'com.networknt:json-schema-validator:1.0.52'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'

    // Logging
    implementation 'io.github.microutils:kotlin-logging-jvm:2.0.6'
    implementation 'ch.qos.logback:logback-classic'

    // Pi4J
    implementation 'com.pi4j:pi4j-core:1.2'
    implementation 'com.pi4j:pi4j-device:1.2'

    // MQTT
    implementation 'com.hivemq:hivemq-mqtt-client:1.2.2'
    compileOnly 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.2'

    // Avahi / ZeroConf / Multicast DNS
    implementation 'org.jmdns:jmdns:3.5.7'

    // Tests
    testImplementation(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
    testImplementation("io.micronaut:micronaut-inject-groovy")
    testImplementation('org.codehaus.groovy:groovy:3.0.7')
    testImplementation('org.codehaus.groovy:groovy-json:3.0.7')
    testImplementation('org.codehaus.groovy:groovy-yaml:3.0.7')
    testImplementation(platform("org.spockframework:spock-bom:2.0-M5-groovy-3.0"))
    testImplementation("org.spockframework:spock-core") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
    testImplementation("io.micronaut.test:micronaut-test-spock")
    testImplementation("net.bytebuddy:byte-buddy:1.11.0")
    testImplementation("org.objenesis:objenesis:3.2")
    testImplementation(platform("org.testcontainers:testcontainers-bom:1.15.3"))
    testImplementation("org.testcontainers:spock")
}

test.classpath += configurations.developmentOnly

mainClassName = "com.mqgateway.ApplicationKt"

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
}

java {
    sourceCompatibility = JavaVersion.toVersion('1.8')
}

allOpen {
    annotation("io.micronaut.aop.Around")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        //Will retain parameter names for Java reflection
        javaParameters = true
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        javaParameters = true
    }
}

kapt {
    arguments {
        arg("micronaut.processing.incremental", true)
        arg("micronaut.processing.annotations", "com.mqgateway.*")
        arg("micronaut.processing.group", "com.mqgateway")
        arg("micronaut.processing.module", "mqgateway")
    }
}

shadowJar {
    mergeServiceFiles()
}

scmVersion {
    versionIncrementer 'incrementMinor'
    versionCreator { version, position ->
        return "$version-${position.shortRevision}"
    }
}

group 'com.mqgateway'
version = scmVersion.version

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
    if (gradle.startParameter.continuous) {
        systemProperties(
            'micronaut.io.watch.restart':'true',
            'micronaut.io.watch.enabled':'true',
            "micronaut.io.watch.paths":"src/main"
        )
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    def props = [version: version]
    from ('src/main/resources') {
        include 'application.yml'
        expand (props)
    }
}

processResources.outputs.upToDateWhen { false }
